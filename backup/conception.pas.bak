unit conception;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, Menus,
  ExtCtrls, StdCtrls, Spin, DOM, XMLwrite, jeu, aide;

type

  { TForm1 }

  TForm1 = class(TForm)
    Button1: TButton;
    FloatSpinEdit1: TFloatSpinEdit;
    Label1: TLabel;
    Label10: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    MainMenu1: TMainMenu;
    Fichier: TMenuItem;
    Aide: TMenuItem;
    Enregistrer: TMenuItem;
    OpenDialog1: TOpenDialog;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Quitter: TMenuItem;
    Nouveau: TMenuItem;
    Ouvrir: TMenuItem;
    RadioGroup1: TRadioGroup;
    SaveDialog1: TSaveDialog;
    SpinEdit1: TSpinEdit;
    SpinEdit2: TSpinEdit;
    SpinEdit3: TSpinEdit;
    SpinEdit4: TSpinEdit;
    SpinEdit5: TSpinEdit;
    SpinEdit6: TSpinEdit;
    SpinEdit7: TSpinEdit;
    SpinEdit8: TSpinEdit;
    SpinEdit9: TSpinEdit;
    procedure AideClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure EnregistrerClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure NouveauClick(Sender: TObject);
    procedure OuvrirClick(Sender: TObject);
    procedure QuitterClick(Sender: TObject);
  private
    { private declarations }
  public
    { public declarations }
  end;

var
  Form1: TForm1;
  maxPV: integer; //Nombre maximal de points de vie d’un joueur
  maxPE: integer; //Nombre maximal de points d’énergie d’un joueur
  minDegat: integer; //Dégât minimal quand un coup « porte»
  maxDegat: integer; //Dégât maximal quand un coup « porte»
  regenPV: integer; //Points de vie gagnés à chaque tour si on n’a pas été touché
  depensePEaction: integer; //Points d’énergie dépensés pour faire une action
  regenPE: integer; //Points d’énergie bonus quand une action réussie
  depensePEblocage: integer; //Points d’énergie dépensés pour faire une action de blocage
  coeffCrit: double; //Coefficient d’un coup critique
  dureeMax: integer; //Durée maximal pour que le joueur choisisse une action
  mode: integer; //Mode de jeu (0 = 1PvsIA, 1 = 1Pvs2P, 2 = IAvsIA)

implementation

{$R *.lfm}

{ TForm1 }



procedure TForm1.Button1Click(Sender: TObject);
begin

  //Passage des valeurs entrées par l'utilisateur dans les variables globales
  maxPV := SpinEdit1.Value;
  maxPE := SpinEdit2.Value;
  minDegat := SpinEdit3.Value;
  maxDegat := SpinEdit4.Value;
  regenPV := SpinEdit5.Value;
  depensePEaction := SpinEdit6.Value;
  regenPE := SpinEdit7.Value;
  depensePEblocage := SpinEdit8.Value;
  coeffCrit := FloatSpinEdit1.Value;
  dureeMax := SpinEdit1.Value;
  mode := RadioGroup1.ItemIndex;

  //Vérification des incohérences :
  if (minDegat > maxDegat) then ShowMessage('Les dégats minimums ne peuvent pas être plus grand que les dégats maximums.')
  else if (regenPV > maxPV) then ShowMessage('On ne peut pas regagner plus de PV que le maximum.')
  else if (regenPE > maxPE) then ShowMessage('On ne peut pas regagner plus de PE que le maximum.')
  else if ((depensePEaction > maxPE) or (depensePEblocage > maxPE)) then ShowMessage('On ne peut pas dépenser plus de PE que le maximum.')
  else
      begin
           //On lance le jeu et cache l'écran de conception
           Form1.Hide();
           Application.CreateForm(TForm2, Form2);
           Form2.Affiche_vie_energie;
           Form2.show();
      end;
end;

procedure TForm1.AideClick(Sender: TObject);
begin
  //On affiche l'aide
  Form3.Show();
  Form1.Hide();
end;

procedure TForm1.EnregistrerClick(Sender: TObject);
var
  filename: string; //Nom du fichier pour ouverture/enregistrement
  doc: TXMLDocument; //Contient des données XML
  root, node, value: TDOMNode; //Noeuds XML
begin
  //Récupération du nom du fichier
  if SaveDialog1.Execute then //Plante
     filename := SaveDialog1.Filename;

  //Ecrit les paramètres dans un XML
  Doc := TXMLDocument.Create;

  root := Doc.CreateElement('parametres');
  Doc.Appendchild(root);

  root := Doc.DocumentElement;
  node := Doc.CreateElement('maxPV');
  value := Doc.CreateTextNode(IntToStr(SpinEdit1.Value));
  root.AppendChild(node);

  writeXMLFile(Doc, filename);
end;

procedure TForm1.FormCreate(Sender: TObject);
begin

end;

procedure TForm1.NouveauClick(Sender: TObject);
begin
  //On réinitilise les valeurs
  SpinEdit1.Value := 100;
  SpinEdit2.Value := 100;
  SpinEdit3.Value := 1;
  SpinEdit4.Value := 8;
  SpinEdit5.Value := 2;
  SpinEdit6.Value := 5;
  SpinEdit7.Value := 1;
  SpinEdit8.Value := 1;
  FloatSpinEdit1.Value := 2.5;
  SpinEdit9.Value := 5;
  RadioGroup1.ItemIndex := 0;
end;

procedure TForm1.OuvrirClick(Sender: TObject);
var
  filename: string;
begin
  if OpenDialog1.Execute then
     filename := OpenDialog1.Filename;
  //Charge les paramètres depuis un XML
end;

procedure TForm1.QuitterClick(Sender: TObject);
begin
  Form1.Close();
end;

end.

